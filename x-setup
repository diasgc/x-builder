#!/bin/bash
# ................................................
# setup util 1.0 2021-diasgc
# ................................................
clear

# Target Triple
#   <arch><sub-arch>-<vendor>-<os>-<environ>
#       <arch>      aarch64, arm, i686, x86_64
#       <sub-arch>  v7a,v7m
#       <vendor>    apple, pc, ibm, unknown
#       <os>        darwin, linux, openbsd
#       <environ>   android, elf, gnu, gnueabihf
#

#

case $1 in
    --git-cleanup)
        git filter-branch --index-filter 'git rm --cached --ignore-unmatch *.tar.gz' -- --all
        rm -Rf .git/refs/original
        rm -Rf .git/logs/
        git gc --aggressive --prune=now
        echo -e "\nDone\n\n"
        ;;
esac


# first-time load common functions
[ -z ${vsh+x} ] && . .common
CH=${CC1}
# load config
[ -f ".config" ] && . .config

[ -z "${build_arch}" ] && build_arch=$(gcc -dumpmachine)
[ -z "${build_os}" ] && build_os=$(uname -s)
[ -z "${build_cpu}" ] && build_cpu=$(uname -m)
printf "${CH}%-20s: ${C0}%s\n" 'build arch' ${build_arch}
printf "${CH}%-20s: ${C0}%s\n" '  build os' ${build_os}
printf "${CH}%-20s: ${C0}%s\n" '  build cpu' ${build_cpu}

if [ -z "${cmd_apt_install}" ];then
    [ -n "$(which sudo)" ] && cmd_apt_install="sudo "
    case $OSTYPE in
        linux-gnu) cmd_apt_install+="apt install";;
        linux-android) cmd_apt_install="pkg install";;
        darwin) cmd_apt_install="brew install";;
    esac
    #[ -n "$(which apt)" ] && cmd_apt_install+="apt install " || cmd_apt_install="exit 1;"
    printf "\n${CH}%-20s: ${C0}%s\n" 'cmd install' "${cmd_apt_install}"
fi

if [ ! -d "builds/toolchain" ]; then
    mkdir -p builds/toolchain
fi
export dir_toolchain="$(pwd)/builds/toolchain"

echo -e "\n${CH}LLVM-Clang:"
if [ -z "$(which clang)" ]; then
    echo -e "not found. Install?"; read -p "[Y|n]" pndk
    case $pndk in y|Y) $cmd_apt_install llvm clang;; esac
fi
if [ -n "$(which clang)" ]; then
    printf "${CH}%-20s: ${C0}%s\n" "  found at" $(which clang)
    clang_version=$(clang --version | grep -o 'clang version [0-9]*.[0-9]*.[0-9]*')
    printf "${CH}%-20s: ${C0}%s\n" '  clang' "$clang_version"
    # install symlinks 
    # todo
    #for cl in aarch64 arm i686 x86_64; do
    #    for e in ar nm addr2line objcopy objdump ranlib readelf size strings strip windres; do
    #        v="${dir_toolchain}/${cl}-linux-gnu-${e}"
    #        [ ! -f "${v}" ] && ln -s "${ndk_toolchain}/bin/llvm-${e}" "${v}" 2>/dev/null
    #    done
    #    [ ! -f "${dir_toolchain}/${cl}-linux-gnu-clang" ] && printf "#!/bin/bash\n[ \"\$1\" != \"-cc1\" ] && ${ndk_toolchain}/bin/clang --target=${cl}${cpuv}-linux-android${eabi}\${NDK_API} \"\$@\" || ${ndk_toolchain}/bin/clang \"\$@\"" >"${dir_toolchain}/${cl}-linux-android-clang"
    #    [ ! -f "${dir_toolchain}/${cl}-linux-gnu-clang++" ] && printf "#!/bin/bash\n[ \"\$1\" != \"-cc1\" ] && ${ndk_toolchain}/bin/clang++ --target=${cl}${cpuv}-linux-android${eabi}\${NDK_API} \"\$@\" || ${ndk_toolchain}/bin/clang++ \"\$@\"" >"${dir_toolchain}/${cl}-linux-android-clang++"
    #    [ ! -f "${dir_toolchain}/${cl}-linux-gnu-as" ] && ln -s "${ndk_toolchain}/bin/arm-linux-gnueabihf-as" "${dir_toolchain}/${cl}-linux-android-as" 2>/dev/null
    #    [ ! -f "${dir_toolchain}/${cl}-linux-gnu-ld" ] && ln -s "${ndk_toolchain}/bin/lld" "${dir_toolchain}/${cl}-linux-android-ld"
    #done
fi

echo -e "\n${CH}Android NDK:"
if [ -z "${ANDROID_NDK_HOME}" ]; then
    ndk_clang_bin_dir=$(find ~ -name "aarch64-linux-android30-clang")
    if [ -z "${ndk_clang_bin_dir}" ]; then
        echo -e "not found. Install?"; read -p "[Y|n]" pndk
        case $pndk in y|Y)
            # install android-ndk
            [ -z "$(which unzip)" ] && sudo apt install unzip
            local od=$(pwd)
            cd ~
            # get latest version
            local url=$(wget -qO- https://developer.android.com/ndk/downloads | grep -Po "https://dl.google.com/android/repository/android-ndk-r..*-linux.zip" | tail -n1)
            # download latest version
            wget $url -qO tmp 2>&1
            local fname=$(basename $url)
            unzip tmp
            rm -f $fname
            mv ${fname%.*} android-ndk
            export ANDROID_NDK_HOME="$(pwd)/android-ndk"
            cd $od
            ;;
        esac
    fi
fi
if [ -n "${ANDROID_NDK_HOME}" ]; then
    printf "${CH}%-20s: ${C0}%s\n" "  found at" ${ANDROID_NDK_HOME}
    ndk_version=$(cat ${ANDROID_NDK_HOME}/source.properties | grep "^Pkg.Revision = " | sed 's/Pkg.Revision = //')
    printf "${CH}%-20s: ${C0}%s " '  version' $ndk_version
    
    ndk_version_latest=$(wget -qO- https://developer.android.com/ndk/downloads | grep ndkVersion | tr ' ' '\n' | tail -n1 | sed 's/"//g')
    if [ "${ndk_version}" == "${ndk_version_latest}" ]; then
        echo -e "(updated)"
    else
        echo -e "${CY1} latest is ${ndk_version_latest}${C0}"
    fi
    
    ndk_toolchain="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-$(uname -m)"
    ndk_sysroot="${ndk_toolchain}/sysroot"
    ndk_clang_version=$(${ndk_toolchain}/bin/clang --version | grep -o 'clang version [0-9]*.[0-9]*.[0-9]*')
    printf "${CH}%-20s: ${C0}%s\n" '  clang' "$ndk_clang_version"

    # check and create symlinks in toolchains dir if needed
    for cl in aarch64 arm i686 x86_64; do
        for e in ar nm addr2line objcopy objdump ranlib readelf size strings strip windres; do
            v="${dir_toolchain}/${cl}-linux-android-${e}"
            [ ! -f "${v}" ] && ln -s "${ndk_toolchain}/bin/llvm-${e}" "${v}" 2>/dev/null
        done
        if [ "${cl}" == "arm" ]; then
            cpuv=v7a
            eabi=eabi
        else
            cpuv=
            eabi=
        fi
        [ ! -f "${dir_toolchain}/${cl}-linux-android-clang" ] && printf "#!/bin/bash\n[ \"\$1\" != \"-cc1\" ] && ${ndk_toolchain}/bin/clang --target=${cl}${cpuv}-linux-android${eabi}\${NDK_API} \"\$@\" || ${ndk_toolchain}/bin/clang \"\$@\"" >"${dir_toolchain}/${cl}-linux-android-clang"
        [ ! -f "${dir_toolchain}/${cl}-linux-android-clang++" ] && printf "#!/bin/bash\n[ \"\$1\" != \"-cc1\" ] && ${ndk_toolchain}/bin/clang++ --target=${cl}${cpuv}-linux-android${eabi}\${NDK_API} \"\$@\" || ${ndk_toolchain}/bin/clang++ \"\$@\"" >"${dir_toolchain}/${cl}-linux-android-clang++"
        [ ! -f "${dir_toolchain}/${cl}-linux-android-as" ] && ln -s "${ndk_toolchain}/bin/arm-linux-androideabi-as" "${dir_toolchain}/${cl}-linux-android-as" 2>/dev/null
        [ ! -f "${dir_toolchain}/${cl}-linux-android-ld" ] && ln -s "${ndk_toolchain}/bin/lld" "${dir_toolchain}/${cl}-linux-android-ld"
	    [ ! -f "${ndk_toolchain}/sysroot/usr/lib/${cl}-linux-android${eabi}/libpthread.a" ] && ${dir_toolchain}/${cl}-linux-android-ar cr "${ndk_toolchain}/sysroot/usr/lib/${cl}-linux-android/libpthread.a"
        [ ! -f "${ndk_toolchain}/sysroot/usr/lib/${cl}-linux-android${eabi}/librt.a" ] && ${dir_toolchain}/${cl}-linux-android-ar cr "${ndk_toolchain}/sysroot/usr/lib/${cl}-linux-android/librt.a"
    done
    printf "${CH}%-20s: ${C0}%s\n" '  toolchain slinks' ok
    [ ! -f "${ndk_sysroot}/usr/include/sys/soundcard.h" ] && printf "#include <linux/soundcard.h>" >"${ndk_sysroot}/usr/include/sys/soundcard.h"
else
    echo -e "  not installed"
fi

echo -e "\n${CH}LLVM MINGW:"
if [ -z "${LLVM_MINGW_HOME}" ]; then
    llvm_mingw_bin_dir=$(find ~ -name "aarch64-w64-mingw32-clang")
    if [ -z "${llvm_mingw_bin_dir}" ]; then
        echo -e "not found. Install?"; read -p "[Y|n]" pndk
        case $pndk in y|Y)
            # install llvm-mingw
            local od=$(pwd)
            cd ~
            [ -d "llvm-mingw" ] && rm -rf "llvm-mingw"
            export llvm_mingw_rel=$(git ls-remote --tags --refs --sort="v:refname" 'https://github.com/mstorsjo/llvm-mingw.git' 2>/dev/null | tail -n1 | sed 's/.*\///')
            wget_untar "https://github.com/mstorsjo/llvm-mingw/releases/download/${llvm_mingw_rel}/llvm-mingw-${llvm_mingw_rel}-ucrt-ubuntu-18.04-x86_64.tar.xz" "llvm-mingw"
            export LLVM_MINGW_HOME="$(pwd)/llvm-mingw"
            echo $llvm_mingw_rel >"${LLVM_MINGW_HOME}/version"
            export xv_llvm_mingw=$(./llvm-mingw/bin/aarch64-w64-mingw32-clang --version | grep -oP '\d*\.\d*.\d* (?=\()')
            cd $od
            ;;
        esac
    else
        export LLVM_MINGW_HOME=$(dirname $(dirname $llvm_mingw_bin_dir))
    fi
fi
if [ -n "${LLVM_MINGW_HOME}" ]; then
    printf "${CH}%-20s: ${C0}%s\n" "  found at" ${LLVM_MINGW_HOME}
    llvm_mingw_version=$(cat ${LLVM_MINGW_HOME}/version)
    printf "${CH}%-20s: ${C0}%s " '  version' $llvm_mingw_version
    llvm_mingw_version_latest=$(git ls-remote --tags --refs --sort="v:refname" 'https://github.com/mstorsjo/llvm-mingw.git' 2>/dev/null | tail -n1 | sed 's/.*\///')
    if [ "${llvm_mingw_version}" == "${llvm_mingw_version_latest}" ]; then
        echo -e "(updated)"
    else
        echo -e "${CY1} latest is ${llvm_mingw_version_latest}${C0}"
    fi

    llvm_mingw_clang_version=$(${LLVM_MINGW_HOME}/bin/clang --version | grep -o 'clang version [0-9]*.[0-9]*.[0-9]*')
    printf "${CH}%-20s: ${C0}%s\n" '  clang' "$llvm_mingw_clang_version"

    # check and create symlinks in toolchains dir if needed
    for cl in aarch64 arm i686 x86_64; do
        for e in ar nm addr2line dlltool objcopy ranlib readelf strings strip windres; do
            v="${dir_toolchain}/${cl}-w64-mingw32-${e}"
            [ ! -f "${v}" ] && ln -s "${LLVM_MINGW_HOME}/bin/llvm-${e}" "${v}" 2>/dev/null
        done
        for e in as c++ c11 c99 cc clang clang++ g++ gcc; do
            v="${dir_toolchain}/${cl}-w64-mingw32-${e}"
            [ ! -f "${v}" ] && ln -s "${LLVM_MINGW_HOME}/bin/clang-target-wrapper.sh" "${v}" 2>/dev/null
        done
        [ ! -f "${dir_toolchain}/${cl}-w64-mingw32-objdump" ] && ln -s "${LLVM_MINGW_HOME}/bin/objdump-wrapper.sh" "${dir_toolchain}/${cl}-w64-mingw32-objdump" 2>/dev/null
        [ ! -f "${dir_toolchain}/${cl}-w64-mingw32-ld" ] && ln -s "${LLVM_MINGW_HOME}/bin/ld-wrapper.sh" "${dir_toolchain}/${cl}-w64-mingw32-ld" 2>/dev/null
        [ ! -f "${dir_toolchain}/${cl}-w64-mingw32-widl" ] && ln -s "${LLVM_MINGW_HOME}/bin/i686-w64-mingw32-widl" "${dir_toolchain}/${cl}-w64-mingw32-ld" 2>/dev/null
    done
    printf "${CH}%-20s: ${C0}%s\n" '  toolchain slinks' ok
fi