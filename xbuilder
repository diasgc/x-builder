#!$SHELL
# ................................................
# X-Builder util 0.3.1 2021-diasgc
# ................................................

init(){

  set -euo pipefail
  . .common

  trap err ERR
  [ -z ${ndk_api+x} ] && ndk_api=21
  [ -z ${debug+x} ] && debug=false
  [ -z ${nodev+x} ] && nodev=false
  [ -z ${is_init+x} ] && is_init=false
  [ -z ${pkg+x} ] && pkg=${lib}
  [ -z ${apt+x} ] && apt=${lib}

  install_tree=false
  cmake_build_type=Release
  cmake_toolchain_file=
  banner=true
  mingw_posix_suffix=
  use_llvm_mingw=true
  use_ndk_cmake=false
  use_clang=true
  req_src_nodev=false
  req_src_clone=false
  req_src_update=false
  req_src_update_deps=false
  req_bld_retry=false

  build_shared=false
  build_static=false
  build_bin=false
  build_docs=false

  build_package=true
  only_repo=false
  pc_filelist=
  log_time_global=$(date +%s)
  shell_dstack=
  [ -f ".config" ] && . .config
  if [ ! -f ".config" ] || test `expr $(date +%s) - $config_lastupdate` -gt 86400; then
    ./xsetup.sh
    . .config || doErr 'Unable to initialize config file'
  fi
  log_time_global=$(date +%s)
  ind=0
  banner ${lib^^}
}

[ -z ${vsh+x} ] && init
log_time_script=$(date +%s)
inc_tab

start(){
    check_packege_integrity && exit 0
    echo "building ${lib}"
}

check_packege_integrity(){
  [ -n "$lst_pc" ] && for p in $lst_pc; do
    [ ! -f "$install_dir/lib/pkgconfig/$p" ] && return 1
  done
  [ -n "$lst_inc" ] && for i in $lst_inc; do
    [ ! -f "$install_dir/include/$i" ] && return 1
  done
  [ -n "$lst_lib" ] && for l in $lst_lib; do
    [ -z "$(ls $install_dir/lib/${l}.a*)" ] && return 1
    [ -z "$(ls $install_dir/lib/${l}.so*)" ] && return 1
  done
  return 0
}

cmake_create_toolchain(){
  cat <<-EOF >${cmake_toolchain_file}
set(CMAKE_SYSTEM_NAME ${host_platform})
set(CMAKE_SYSTEM_PROCESSOR ${host_abi})
set(CMAKE_SYSROOT ${host_sysroot})
set(CMAKE_FIND_ROOT_PATH ${host_sysroot} ${packages_dir})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
set(CMAKE_C_COMPILER ${CC})
set(CMAKE_CXX_COMPILER ${CXX})
set(CMAKE_AR ${AR} CACHE FILEPATH Archiver)
set(CMAKE_RANLIB ${RANLIB} CACHE FILEPATH Indexer)
set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} ${CPPFLAGS} ${CFLAGS})
set(CMAKE_CXX_FLAGS ${CMAKE_C_FLAGS} ${CPPFLAGS} ${CXXFLAGS})
include(${packages_dir})
EOF
  case $host_platform in
    Android) cat <<-EOF >>${cmake_toolchain_file}
set(CMAKE_ANDROID_ARCH_ABI ${host_abi})
set(ANDROID_PLATFORM ${ndk_api})
set(ANDROID_NDK ${ANDROID_NDK_HOME})
set(CMAKE_FIND_ROOT_PATH ${host_sysroot}/usr ${host_sysroot}/usr/lib/$host_arch} ${host_sysroot}/usr/lib/${host_arch}/${ndk_api} ${packages_dir})
include(${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake)
EOF
      ;;
    Windows) cat <<-EOF >>${cmake_toolchain_file}
set(CMAKE_RC_COMPILER ${host_cross_prefix}windres)
set(CMAKE_MC_COMPILER ${host_cross_prefix}windmc)
EOF
      ;;
  esac
}

setup_toolchain(){
  
  [ -z "${host_cross_cx+x}" ] && host_cross_cx=${host_arch}
  [ -z "${host_cross_prefix+x}" ] && host_cross_prefix=${host_arch}

  case ${host_platform} in
    Android)
      host_clang=true
      host_toolchain="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
      host_sysroot="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
      host_cross_cx="${host_toolchain}/${host_cross_cx}${ndk_api}-"
      host_cross_prefix="${host_toolchain}/bin/${host_cross_prefix}-"
      CC="${host_cross_cx}clang"
      CC="${host_cross_cx}clang++"
      AS="${CC}"
      LD="${host_toolchain}/ld.lld"
      CT0=$CG0 CT1=$CG1
      ;;
    Linux)
      host_clang=false
      host_toolchain="/usr/bin"
      host_sysroot="/usr/${arch}"
      host_cross_cx="${host_toolchain}/${host_cross_cx}-"
      host_cross_prefix="${host_toolchain}/${host_cross_prefix}-"
      CC="${host_cross_cx}gcc"
      CXX="${host_cross_cx}g++"
      AS="${host_cross_prefix}as"
      LD="${host_cross_prefix}ld"
      CT0=$CM0 CT1=$CM1
      ;;
    Windows)
      host_clang=true
      host_toolchain="${LLVM_MINGW_HOME}/bin"
      host_sysroot="${LLVM_MINGW_HOME}/${host_prefix}"
      host_cross_cx="${host_toolchain}/${host_cross_cx}-"
      host_cross_prefix="${host_toolchain}/${host_cross_prefix}-"
      CC="${host_cross_cx}clang"
      CXX="${host_cross_cx}clang++"
      AS="${host_cross_prefix}as"
      LD="${host_cross_prefix}ld"
      CT0=$CC0 CT1=$CC1
      ;;
  esac
  export host_arch host_abi host_platform host_clang \
      host_toolchain host_sysroot host_cross_prefix \
      host_cross_cx CC CXX AS LD \
      ADDR2LINE=${host_cross_prefix}addr2line \
      OBJCOPY=${host_cross_prefix}objcopy \
      OBJDUMP=${host_cross_prefix}objdump \
      RANLIB=${host_cross_prefix}ranlib \
      READELF=${host_cross_prefix}readelf \
      SIZE=${host_cross_prefix}size \
      STRINGS=${host_cross_prefix}strings \
      STRIP=${host_cross_prefix}strip \
      WINDRES=${host_cross_prefix}windres \
      install_dir="$(pwd)/builds/${host_platform,}/${host_abi}"
}

while [ -n "${1+x}" ];do
  case ${1} in
    aa64|aa8|a*64-*android|android )
      host_arch='aarch64-linux-android'
      host_abi='arm64-v8a'
      host_cross_prefix='llvm'
      host_platform="Android"
      setup_toolchain
      ;;
    aa7|arm-*android*eabi|arm-android)
      host_arch='arm-linux-androideabi'
      host_cross_cx='armv7a-linux-androideabi'
      host_cross_prefix='llvm'
      host_abi='armeabi-v7a'
      host_platform="Android" 
      setup_toolchain
      ;;
    a86|ax86|*86-*android)
      host_arch='i686-linux-androideabi'
      host_cross_prefix='llvm'
      host_abi='x86'
      host_platform="Android" 
      setup_toolchain
      ;;
    a64|ax64|*64-*android)
      host_arch='x86_64-linux-androideabi'
      host_cross_prefix='llvm'
      host_abi='x86_64'
      host_platform="Android"
      setup_toolchain
      ;;
    la8|la64|a*64-linux|a*64-*gnu|a*64-linux-gnu|rpi*64|rpi3b*)
      host_arch='aarch64-linux-gnu'
      host_abi='aarch64' 
      host_platform="Linux" 
      setup_toolchain
      ;;
    la7|lahf|arm*hf|arm-linux*|rpi*32|rpi2*)
      host_arch='arm-linux-gnueabihf'
      host_abi='arm'
      host_platform="Linux"
      setup_toolchain
      ;;
    l86|lx86|*86-linux*|linux*32)
      host_arch='i686-linux-gnu'
      host_abi='arm'
      host_platform="Linux"
      setup_toolchain
      ;;
    l64|lx64|*64-linux*|linux*64|linux )
      host_arch='i686-linux-gnu'
      host_abi='arm'
      host_platform="Linux"
      CT0=$CM0 CT1=$CM1
      ;;
    wa8|a*64-w64*|a*64-*mingw*)
      host_arch='aarch64-w64-mingw32'
      host_abi='aarch64'
      host_platform="Windows"
      setup_toolchain
      ;;
    wa7|arm*-w64*|arm*-*mingw*)
      host_arch='armv7-w64-mingw32'
      host_abi='armv7'
      host_platform="Windows"
      setup_toolchain
      ;;
    w86|wx86|*86-win*|*86-*mingw*|w*32)
      host_arch='i686-w64-mingw32'
      host_abi='x86'
      host_platform="Windows"
      setup_toolchain
      ;;
    w64|wx64|*64-win*|*64-*mingw*|windows|win|w*64)
      host_arch='x86_64-w64-mingw32'
      host_abi='x86_64'
      host_platform="Windows"
      setup_toolchain
      ;;

    --api)		shift; export host_api=$1;;
    --clang)	use_clang=true;;
    --prefix)	shift; packages_dir=$1;;
    --nodev)	req_src_nodev=true;;
    --clone)	req_src_clone=true;;
    --update)	req_src_update=true;;
    --redo)		shift; redo_action=${1};;
    --static)	build_static=true;;
    --shared)	build_shared=true;;
    --both)		build_shared=true build_static=true;;
    --bin)		build_bin=true;;
    --docs)		build_docs=true;;
    --check)  check_packege_integrity; exit 0;;
    --get)		shift; case $1 in
      pc_cflags)		 [ -f "${pkgfile}" ] && echo $(pkg-config ${pkgfile} --cflags) && exit 0;;
      pc_libs)		   [ -f "${pkgfile}" ] && echo $(pkg-config ${pkgfile} --libs) && exit 0;;
      pc_staticlibs) [ -f "${pkgfile}" ] && echo $(pkg-config ${pkgfile} --libs --static) && exit 0;;
      pc-version)		 [ -f "${pkgfile}" ] && echo $(pkg-config ${pkgfile} --modversion) && exit 0;;
      pc-fpath)		   echo ${pkgfile} && exit 0;;
      pc_fname)		   echo ${pkg} && exit 0;;
      prefix)			   echo ${install_dir} && exit 0;;
      desc)			     echo ${dsc} && exit 0;;
      licence)		   echo ${lic} && exit 0;;
      libname)		   echo ${lib} && exit 0;;
      aptname)		   echo ${apt} && exit 0;;
      varname)		   shift; echo ${!1} && exit 0;;
      options)		   ;;
      esac
      ;;
    --clear) shift; case $1 in
      sources)	req_erase_list+=" ${pwd}/sources";;
      builds)		req_erase_list+=" ${pwd}/builds";;
      logs)		  req_erase_list+=" ${pwd}/builds/*.log";;
      source)		req_erase_list+=" ${pwd}/sources/${lib}";;
      build)		install_tree && req_erase_list+=" $(pwd)/builds/${host_os}/${host_abi}/${lib}";;
      pkgdist)	req_erase_list+=" ${pwd}/packages";;
      wipeall)	rm -rf sources builds packages 2>&1 >/dev/null && exit 0;;
      esac
      ;;
    *) break;;
  esac
  shift
done

if [ -n "${req_erase_list+x}" ];then
	for f in ${req_erase_list}; do
		rm_quiet $f
	done
fi

! $build_static && ! $build_shared && build_static=true

[ -z ${packages_dir+x} ] && packages_dir="$(pwd)/builds/${host_platform,}/${host_abi}"

if $install_tree; then
  install_dir="$(pwd)/builds/${host_platform,}/${host_abi}/${lib}"
else
  install_dir="${packages_dir}"
fi